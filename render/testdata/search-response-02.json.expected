This file contains the rendered output per line and its associated metadata.

Lines that begin with a line number contains (after the '|') the contents that
will be inserted into the vim buffer at that line. The immediately following
line contains an object representing associated metadata.
-------------------------------------------------------------------------------

001|CodeSearch results for ^q{unspecified}q_
   |{}
002|
   |{}
003|1. src/base/at_exit.cc^>{
   |{'j': ('src/base/at_exit.cc', 0, 0)}
004|    20 ^c{// version of the constructor, and if we are building a dynamic library we may}c_
   |{'j': ('src/base/at_exit.cc', 19, 7)}
005|    21 ^c{// end up with multiple AtExitManagers on the same process.  We don't protect}c_
   |{'j': ('src/base/at_exit.cc', 20, 7)}
006|    22 ^c{// this for thread-safe access, since it will only be modified in testing.}c_
   |{'j': ('src/base/at_exit.cc', 21, 7)}
007|    23 ^k{static}k_ AtExitManager* ^${g_top_manager}$_ = ^k{nullptr}k_;
   |{'j': ('src/base/at_exit.cc', 22, 7)}
008|    24 
   |{'j': ('src/base/at_exit.cc', 23, 7)}
009|    25 ^k{static}k_ ^k{bool}k_ g_disable_managers = ^k{false}k_;
   |{'j': ('src/base/at_exit.cc', 24, 7)}
010|    26 
   |{'j': ('src/base/at_exit.cc', 25, 7)}
011|    27 }>_^>{
   |{'j': ('src/base/at_exit.cc', 26, 7)}
012|    [...]
   |{'j': ('src/base/at_exit.cc', 61, 9)}
013|    62   AutoLock lock(^${g_top_manager}$_->lock_);
   |{'j': ('src/base/at_exit.cc', 61, 7)}
014|    63   DCHECK(!^${g_top_manager}$_->processing_callbacks_);
   |{'j': ('src/base/at_exit.cc', 62, 7)}
015|    64   ^${g_top_manager}$_->stack_.push(std::move(task));
   |{'j': ('src/base/at_exit.cc', 63, 7)}
016|    65 }
   |{'j': ('src/base/at_exit.cc', 64, 7)}
017|    66 
   |{'j': ('src/base/at_exit.cc', 65, 7)}
018|    67 ^c{// static}c_
   |{'j': ('src/base/at_exit.cc', 66, 7)}
019|    68 }>_^>{
   |{'j': ('src/base/at_exit.cc', 67, 7)}
020|    [...]
   |{'j': ('src/base/at_exit.cc', 94, 9)}
021|     95   DCHECK(^${g_top_manager}$_->stack_.empty());
   |{'j': ('src/base/at_exit.cc', 94, 8)}
022|     96 }
   |{'j': ('src/base/at_exit.cc', 95, 8)}
023|     97 
   |{'j': ('src/base/at_exit.cc', 96, 8)}
024|     98 ^k{void}k_ AtExitManager::DisableAllAtExitManagers() {
   |{'j': ('src/base/at_exit.cc', 97, 8)}
025|     99   AutoLock lock(^${g_top_manager}$_->lock_);
   |{'j': ('src/base/at_exit.cc', 98, 8)}
026|    100   g_disable_managers = ^k{true}k_;
   |{'j': ('src/base/at_exit.cc', 99, 8)}
027|    101 }
   |{'j': ('src/base/at_exit.cc', 100, 8)}
028|    102 
   |{'j': ('src/base/at_exit.cc', 101, 8)}
029|    103 AtExitManager::AtExitManager(^k{bool}k_ shadow)
   |{'j': ('src/base/at_exit.cc', 102, 8)}
030|    104     : processing_callbacks_(^k{false}k_), next_manager_(^${g_top_manager}$_) {
   |{'j': ('src/base/at_exit.cc', 103, 8)}
031|    105   DCHECK(shadow || !^${g_top_manager}$_);
   |{'j': ('src/base/at_exit.cc', 104, 8)}
032|    106   ^${g_top_manager}$_ = ^k{this}k_;
   |{'j': ('src/base/at_exit.cc', 105, 8)}
033|    107 }>_
   |{'j': ('src/base/at_exit.cc', 106, 8)}
034|
   |{}
035|2. src/build/sanitizers/tsan_suppressions.cc^>{
   |{'j': ('src/build/sanitizers/tsan_suppressions.cc', 0, 0)}
036|    109     ^s{"race:base::Thread::StopSoon\n"}s_
   |{'j': ('src/build/sanitizers/tsan_suppressions.cc', 108, 8)}
037|    110 
   |{'j': ('src/build/sanitizers/tsan_suppressions.cc', 109, 8)}
038|    111     ^c{// http://crbug.com/272095}c_
   |{'j': ('src/build/sanitizers/tsan_suppressions.cc', 110, 8)}
039|    112     ^s{"race:base::^${g_top_manager}$_\n"}s_
   |{'j': ('src/build/sanitizers/tsan_suppressions.cc', 111, 8)}
040|    113 
   |{'j': ('src/build/sanitizers/tsan_suppressions.cc', 112, 8)}
041|    114     ^c{// http://crbug.com/308590}c_
   |{'j': ('src/build/sanitizers/tsan_suppressions.cc', 113, 8)}
042|    115     ^s{"race:CustomThreadWatcher::~CustomThreadWatcher\n"}s_
   |{'j': ('src/build/sanitizers/tsan_suppressions.cc', 114, 8)}
043|    116 }>_
   |{'j': ('src/build/sanitizers/tsan_suppressions.cc', 115, 8)}
044|
   |{}
045|
   |{}
